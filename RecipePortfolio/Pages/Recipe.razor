@page "/recipe/{Id}"
@using RecipePortfolio.Models
@using RecipePortfolio.Services
@using RecipePortfolio.Shared.Components
@inject RecipeService RecipeService

@if (isLoading)
{
    <LoadingSpinner Message="Loading recipes..."/>
}
else if (errorMessage != null)
{
    <ErrorAlert Message="@errorMessage"/>
}
else if (recipe == null)
{
    <ErrorAlert Message="Recipe not found"/>
}
else
{
    <RecipeDetail Recipe="recipe"/>
}


@code {
    /// <summary>
    /// The ID of the recipe to display.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = "";

    /// <summary>
    /// The recipe to display.
    /// </summary>
    private Models.Recipe? recipe;

    /// <summary>
    /// Indicates whether the page is currently loading data.
    /// </summary>
    private bool isLoading = true;

    /// <summary>
    /// The error message to display if an error occurs.
    /// </summary>
    private string? errorMessage;

    /// <summary>
    /// Called when the component has received parameters from its parent in the render tree.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var recipes = await RecipeService.GetRecipesAsync();
            recipe = recipes?.FirstOrDefault(r => r.Id == Id);
            if (recipe == null)
            {
                errorMessage = "Recipe not found.";
            }
        }
        catch (HttpRequestException e)
        {
            errorMessage = $"Network error: {e.Message}";
        }
        catch (Exception e)
        {
            errorMessage = $"Unexpected error: {e.Message}";
        }
        finally
        {
            isLoading = false;
        }

    }
}
