@page "/recipe/{Id}"
@using RecipePortfolio.Data
@inject HttpClient Http
@inject NavigationManager Navigation

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p>Loading recipe...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (recipe == null)
{
    <div class="alert alert-warning" role="alert">
        Recipe not found
    </div>
}
else
{
    <div class="recipe-detail container mt-4">
        <button class="btn btn-secondary mb-4" @onclick="NavigateBack">Back</button>
        <h1 class="text-center mb-4">@recipe.Title</h1>
        <div class="text-center mb-4">
            <img src="@recipe.Image" alt="@recipe.Title" class="recipe-image img-fluid rounded"/>
        </div>
        <div class="row">
            <div class="col-md-6">
                <h2>Ingredients</h2>
                <ul class="list-group">
                    @foreach (var ingredient in recipe.Ingredients)
                    {
                        <li class="list-group-item">@ingredient</li>
                    }
                </ul>
            </div>
            <div class="col-md-6">
                <h2>Instructions</h2>
                <ol class="list-group list-group-numbered">
                    @foreach (var instruction in recipe.Instructions)
                    {
                        <li class="list-group-item">@instruction</li>
                    }
                </ol>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-6">
                <h3>Preparation Time</h3>
                <p>@recipe.PrepTime</p>
            </div>
            <div class="col-md-6">
                <h3>Tags</h3>
                <div>
                    @foreach (var tag in recipe.Tags){
                        <span class="badge badge-info mr-2">@tag</span>
                    }
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; } = "";

    private Data.Recipe? recipe;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var recipes = await Http.GetFromJsonAsync<List<Data.Recipe>>("data/recipes.json");
            recipe = recipes?.FirstOrDefault(r => r.Id == Id);
            if (recipe == null)
            {
                errorMessage = "Recipe not found.";
            }
        }
        catch (HttpRequestException e)
        {
            errorMessage = $"Network error: {e.Message}";
        }
        catch (Exception e)
        {
            errorMessage = $"Unexpected error: {e.Message}";
        }
        finally
        {
            isLoading = false;
        }

    }

    private void NavigateBack(){
        Navigation.NavigateTo("/");
    }
}
