@page "/"
@using RecipePortfolio.Models
@using RecipePortfolio.Services
@using RecipePortfolio.Shared.Components
@using RecipePortfolio.Shared
@using RecipePortfolio.Utils
@inject IRecipeService RecipeService
@inject IRecipeFilterService RecipeFilterService
@inject ITagService TagService

<h1 class="text-center my-4">My Recipe Portfolio</h1>

@if (isLoading)
{
    <LoadingSpinner Message="Loading recipes..." />
}
else if (errorMessage != null)
{
    <ErrorAlert Message="@errorMessage" />
}
else
{
    <div class="search-section">
        <div class="row mb-4">
            <div class="col-md-6">
                <SearchBar 
                SearchTerm="@searchTerm" 
                SearchTermChanged="OnSearchTermChanged" 
                Placeholder="Search recipes..." 
                SuggestionProvider="GetRecipeSuggestions"/>
            </div>
            <div class="col-md-6">
                <SearchBar 
                SearchTerm="@tagSearchTerm" 
                SearchTermChanged="OnTagSearchTermChanged" 
                Placeholder="Search tags..." 
                SuggestionProvider="GetTagSuggestions"/>
            </div>
        </div>

        <TagList Tags="filteredTags" SelectedTags="selectedTags" OnTagClick="ToggleTagSelection" />
        <SelectedTagsList Tags="selectedTags" OnTagRemove="RemoveTag" />
    </div>

    <RecipeList Recipes="filteredRecipes" />
}

@code {
    private string searchTerm = "";
    private string tagSearchTerm = "";
    private List<Models.Recipe>? recipes;
    private List<Models.Recipe>? filteredRecipes;
    private List<Tag> allTags = new();
    private List<Tag> filteredTags = new();
    private List<string> selectedTags = new();
    private string? errorMessage;
    private bool isLoading = true;
    private CancellationTokenSource? debounceCts;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipesAsync();
    }

    private async Task LoadRecipesAsync(){
        try
        {
            recipes = await RecipeService.GetRecipesAsync();
            filteredRecipes = recipes;
            allTags = TagService.GetTagsFromRecipes(recipes);
            filteredTags = allTags; 
        }
        catch (HttpRequestException e)
        {
            LogError(e, "Network error");
        }
        catch (Exception e)
        {
            LogError(e, "Unexpected error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchTermChanged(string searchTerm)
    {
        this.searchTerm = searchTerm;
        await FilterRecipes();
    }

    private async Task OnTagSearchTermChanged(string tagSearchTerm)
    {
        this.tagSearchTerm = tagSearchTerm;
        await FilterTags();
    }

    private async Task<List<String>> GetRecipeSuggestions(string searchTerm)
    {
        if (recipes == null || string.IsNullOrWhiteSpace(searchTerm)) return new List<string>();

        return recipes
            .Where(r => r.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Select(r => r.Title)
            .Take(5)
            .ToList();
    }

    private async Task<List<string>> GetTagSuggestions(string searchTerm)
    {
        if (allTags == null || string.IsNullOrWhiteSpace(searchTerm)) return new();

        return allTags
            .Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Select(t => t.Name)
            .Take(5)
            .ToList();
    }

    private async Task FilterRecipes()
    {
        if (recipes == null) return;

        filteredRecipes = RecipeFilterService.FilterRecipes(recipes, searchTerm, selectedTags);
        await UpdateTagCounts();
    }

    private async Task FilterTags()
    {
        filteredTags = TagService.FilterTags(allTags, tagSearchTerm);
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateTagCounts()
    {
        if (recipes == null) return;

        var tags = RecipeFilterService.UpdateTagCounts(recipes, searchTerm, selectedTags);

        allTags = tags;
        filteredTags = TagService.FilterTags(tags, tagSearchTerm);
        selectedTags = selectedTags.Where(tag => tags.Any(t => t.Name == tag && t.Count > 0)).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private void ToggleTagSelection(string tag)
    {
        if (selectedTags.Contains(tag))
        {
            selectedTags.Remove(tag);
        }
        else
        {
            selectedTags.Add(tag);
        }
        DebounceUtils.Debounce(FilterRecipes, ref debounceCts);
    }

    private void RemoveTag(string tag){
        selectedTags.Remove(tag);
        DebounceUtils.Debounce(FilterRecipes, ref debounceCts);
    }

    private void LogError(Exception e, string message)
    {
        Console.Error.WriteLine(e);
        errorMessage = $"{message}: {e.Message}";
    }
}