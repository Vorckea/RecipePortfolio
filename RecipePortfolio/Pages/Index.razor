@page "/"
@using RecipePortfolio.Data
@using RecipePortfolio.Shared
@inject HttpClient Http

<h1 class="text-center my-4">My Recipe Portfolio</h1>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p>Loading recipes...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else
{
    <div class="search-section">
        <div class="row mb-4">
            <div class="col-md-6">
                <input type="text"
                class="form-control search-bar"
                @bind="SearchTerm"
                placeholder="Search recipes..."
                @oninput="DebounceSearch" />
            </div>
            <div class="col-md-6">
                <input type="text"
                class="form-control tag-search-bar"
                @bind="TagSearchTerm"
                placeholder="Search tags..."
                @oninput="DebounceTagSearch" />
            </div>
        </div>

        <div class="mb-4">
            @foreach (var tag in filteredTags.OrderByDescending(t => selectedTags.Contains(t.Name)).ThenByDescending(t => t.Count).ThenBy(t => t.Name))
            {
                <button class="btn tag-pill @GetTagButtonClass(tag.Name)" @onclick="() => ToggleTagSelection(tag.Name)">
                    @tag.Name (@tag.Count)
                </button>
            }
        </div>

        <div class="mb-4">
            @foreach (var tag in selectedTags)
            {
                <span class="badge badge-primary selected-tag-pill">
                    @tag
                    <button type="button" class="close" aria-label="Close" @onclick="() => RemoveTag(tag)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </span>
            }
        </div>
    </div>

    <div class="row">
        @foreach (var recipe in filteredRecipes)
        {
            <div class="col-md-4 mb-4">
                <RecipeCard Recipe="recipe" />
            </div>
        }
    </div>
}

@code {
    private string searchTerm = "";
    private string tagSearchTerm = "";
    private List<Data.Recipe>? recipes;
    private List<Data.Recipe>? filteredRecipes;
    private List<Tag> allTags = new();
    private List<Tag> filteredTags = new();
    private List<string> selectedTags = new();
    private string? errorMessage;
    private bool isLoading = true;
    private CancellationTokenSource? debounceCts;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipesAsync();
    }

    private async Task LoadRecipesAsync(){
        try
        {
            recipes = await Http.GetFromJsonAsync<List<Data.Recipe>>("data/recipes.json");
            filteredRecipes = recipes;
            allTags = recipes?.SelectMany(r => r.Tags)
                .GroupBy(t => t)
                .Select(g => new Tag { Name = g.Key, Count = g.Count() })
                .ToList();
            filteredTags = allTags ?? new List<Tag>(); 
        }
        catch (HttpRequestException e)
        {
            LogError(e);
            errorMessage = $"Network error: {e.Message}";
        }
        catch (Exception e)
        {
            LogError(e);
            errorMessage = $"Unexpected error: {e.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            DebounceFilterRecipes();
        }
    }

    private string TagSearchTerm
    {
        get => tagSearchTerm;
        set
        {
            tagSearchTerm = value;
            DebounceFilterTags();
        }
    }

    private void DebounceFilterRecipes()
    {
        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;

        _ = Task.Delay(300, token).ContinueWith(async task =>
            {
                if (!task.IsCanceled)
                {
                    await FilterRecipes();
                }
            }, token);
    }

    private void DebounceFilterTags(){
        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;

        _ = Task.Delay(300, token).ContinueWith(async task =>
            {
                if (!task.IsCanceled)
                {
                    await FilterTags();
                }
            }, token);
    }

    private async Task FilterRecipes()
    {
        if (recipes == null) return;

        if (string.IsNullOrWhiteSpace(searchTerm) && !selectedTags.Any())
        {
            filteredRecipes = recipes;
        }
        else
        {
            filteredRecipes = recipes?
                .Where(r =>
                    (string.IsNullOrWhiteSpace(searchTerm) || r.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) &&
                    (!selectedTags.Any() || selectedTags.All(tag => r.Tags.Contains(tag)))
                )
                .ToList();
        }

        await UpdateTagCounts();
        await InvokeAsync(StateHasChanged);
    }

    private async Task FilterTags()
    {
        if (allTags == null) return;

        if (string.IsNullOrEmpty(tagSearchTerm))
        {
            filteredTags = allTags;
        }
        else
        {
            filteredTags = allTags
                .Where(t => t.Name.Contains(tagSearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateTagCounts()
    {
        if (recipes == null) return;

        var filteredRecipesForTags = recipes
            .Where(r =>
                (string.IsNullOrWhiteSpace(searchTerm) || r.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (!selectedTags.Any() || selectedTags.All(tag => r.Tags.Contains(tag)))
            )
            .ToList();

        var tags = filteredRecipesForTags
            .SelectMany(r => r.Tags)
            .GroupBy(t => t)
            .Select(g => new Tag { Name = g.Key, Count = g.Count() })
            .ToList();

        allTags = tags;
        filteredTags = tags
            .Where(t => string.IsNullOrEmpty(tagSearchTerm) || t.Name.Contains(tagSearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
        selectedTags = selectedTags.Where(tag => tags.Any(t => t.Name == tag && t.Count > 0)).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private void DebounceSearch(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
    }

    private void DebounceTagSearch(ChangeEventArgs e)
    {
        TagSearchTerm = e.Value?.ToString() ?? "";
    }

    private void ToggleTagSelection(string tag)
    {
        if (selectedTags.Contains(tag))
        {
            selectedTags.Remove(tag);
        }
        else
        {
            selectedTags.Add(tag);
        }
        DebounceFilterRecipes();
    }

    private void RemoveTag(string tag){
        selectedTags.Remove(tag);
        DebounceFilterRecipes();
    }

    private string GetTagButtonClass(string tag)
    {
        return selectedTags.Contains(tag) ? "btn-primary" : "btn-secondary";
    }

    private void LogError(Exception e){
        Console.Error.WriteLine(e);
    }

    private class Tag
    {
        public string Name { get; set; }
        public int Count { get; set; }
    }
}