@page "/"
@using RecipePortfolio.Models
@using RecipePortfolio.Services
@using RecipePortfolio.Shared
@using RecipePortfolio.Utils
@inject RecipeService RecipeService
@inject RecipeFilterService RecipeFilterService

<h1 class="text-center my-4">My Recipe Portfolio</h1>

@if (isLoading)
{
    <LoadingSpinner Message="Loading recipes..." />
}
else if (errorMessage != null)
{
    <ErrorAlert Message="@errorMessage" />
}
else
{
    <div class="search-section">
        <div class="row mb-4">
            <div class="col-md-6">
                <input type="text"
                class="form-control search-bar"
                @bind="SearchTerm"
                placeholder="Search recipes..."
                @oninput="DebounceSearch" />
            </div>
            <div class="col-md-6">
                <input type="text"
                class="form-control tag-search-bar"
                @bind="TagSearchTerm"
                placeholder="Search tags..."
                @oninput="DebounceTagSearch" />
            </div>
        </div>

        <div class="mb-4">
            @foreach (var tag in filteredTags.OrderByDescending(t => selectedTags.Contains(t.Name)).ThenByDescending(t => t.Count).ThenBy(t => t.Name))
            {
                <button class="btn tag-pill @GetTagButtonClass(tag.Name)" @onclick="() => ToggleTagSelection(tag.Name)">
                    @tag.Name (@tag.Count)
                </button>
            }
        </div>

        <div class="mb-4">
            @foreach (var tag in selectedTags)
            {
                <span class="badge badge-primary selected-tag-pill">
                    @tag
                    <button type="button" class="close" aria-label="Close" @onclick="() => RemoveTag(tag)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </span>
            }
        </div>
    </div>

    <div class="row">
        @foreach (var recipe in filteredRecipes)
        {
            <div class="col-md-4 mb-4 d-flex">
                <RecipeCard Recipe="recipe" />
            </div>
        }
    </div>
}

@code {
    private string searchTerm = "";
    private string tagSearchTerm = "";
    private List<Models.Recipe>? recipes;
    private List<Models.Recipe>? filteredRecipes;
    private List<Tag> allTags = new();
    private List<Tag> filteredTags = new();
    private List<string> selectedTags = new();
    private string? errorMessage;
    private bool isLoading = true;
    private CancellationTokenSource? debounceCts;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipesAsync();
    }

    private async Task LoadRecipesAsync(){
        try
        {
            recipes = await RecipeService.GetRecipesAsync();
            filteredRecipes = recipes;
            allTags = recipes?.SelectMany(r => r.Tags)
                .GroupBy(t => t)
                .Select(g => new Tag { Name = g.Key, Count = g.Count() })
                .ToList() ?? new List<Tag>();
            filteredTags = allTags; 
        }
        catch (HttpRequestException e)
        {
            LogError(e, "Network error");
        }
        catch (Exception e)
        {
            LogError(e, "Unexpected error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            DebounceUtils.Debounce(DebounceFilterRecipes, ref debounceCts);
        }
    }

    private string TagSearchTerm
    {
        get => tagSearchTerm;
        set
        {
            tagSearchTerm = value;
            DebounceUtils.Debounce(DebounceFilterTags, ref debounceCts);
        }
    }

    private async Task DebounceFilterRecipes()
    {
        if (recipes == null) return;

        filteredRecipes = RecipeFilterService.FilterRecipes(recipes, searchTerm, selectedTags);
        await UpdateTagCounts();
    }

    private async Task DebounceFilterTags(){
        if (allTags == null) return;

        filteredTags = string.IsNullOrEmpty(tagSearchTerm)
            ? allTags
            : allTags.Where(t => t.Name.Contains(tagSearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateTagCounts()
    {
        if (recipes == null) return;

        var tags = RecipeFilterService.UpdateTagCounts(recipes, searchTerm, selectedTags);

        allTags = tags;
        filteredTags = tags
            .Where(t => string.IsNullOrEmpty(tagSearchTerm) || t.Name.Contains(tagSearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
        selectedTags = selectedTags.Where(tag => tags.Any(t => t.Name == tag && t.Count > 0)).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private void DebounceSearch(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
    }

    private void DebounceTagSearch(ChangeEventArgs e)
    {
        TagSearchTerm = e.Value?.ToString() ?? "";
    }

    private void ToggleTagSelection(string tag)
    {
        if (selectedTags.Contains(tag))
        {
            selectedTags.Remove(tag);
        }
        else
        {
            selectedTags.Add(tag);
        }
        DebounceUtils.Debounce(DebounceFilterRecipes, ref debounceCts);
    }

    private void RemoveTag(string tag){
        selectedTags.Remove(tag);
        DebounceUtils.Debounce(DebounceFilterRecipes, ref debounceCts);
    }

    private string GetTagButtonClass(string tag)
    {
        return selectedTags.Contains(tag) ? "btn-primary" : "btn-secondary";
    }

    private void LogError(Exception e, string message)
    {
        Console.Error.WriteLine(e);
        errorMessage = $"{message}: {e.Message}";
    }
}