@page "/"
@using RecipePortfolio.Data
@using RecipePortfolio.Shared
@inject HttpClient Http

<h1 class="text-center my-4">My Recipe Portfolio</h1>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p>Loading recipes...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else
{
    <div class="form-group">
        <input type="text"
        class="form-control"
        @bind="SearchTerm"
        placeholder="Search recipes..."
        @oninput="DebounceSearch" />
    </div>

    <div class="row">
        @foreach (var recipe in filteredRecipes)
        {
            <div class="col-md-4 mb-4">
                <RecipeCard Recipe="recipe" />
            </div>
        }
    </div>
}

@code {
    private string searchTerm = "";
    private List<Data.Recipe>? recipes;
    private List<Data.Recipe>? filteredRecipes;
    private string? errorMessage;
    private bool isLoading = true;
    private CancellationTokenSource? debounceCts;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipesAsync();
    }

    private async Task LoadRecipesAsync(){
        try
        {
            recipes = await Http.GetFromJsonAsync<List<Data.Recipe>>("data/recipes.json");
            filteredRecipes = recipes;
        }
        catch (HttpRequestException e)
        {
            LogError(e);
            errorMessage = $"Network error: {e.Message}";
        }
        catch (Exception e)
        {
            LogError(e);
            errorMessage = $"Unexpected error: {e.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            DebounceFilterRecipes();
        }
    }

    private void DebounceFilterRecipes()
    {
        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;

        _ = Task.Delay(300, token).ContinueWith(async task =>
            {
                if (!task.IsCanceled)
                {
                    await FilterRecipes();
                }
            }, token);
    }

    private async Task FilterRecipes()
    {
        if (recipes == null) return;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRecipes = recipes;
        }
        else
        {
            filteredRecipes = recipes?
                .Where(r =>
                    r.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (r.Tags != null && r.Tags.Any(t =>
                        t.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                )
                .ToList();
        }

        await InvokeAsync(StateHasChanged);
    }

    private void DebounceSearch(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
    }

    private void LogError(Exception e){
        Console.Error.WriteLine(e);
    }
}